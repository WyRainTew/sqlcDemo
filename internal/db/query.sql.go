// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
)

const getAllBooks = `-- name: GetAllBooks :many
SELECT id, name, description, metadata, category, price, created_at, updated_at FROM books ORDER BY name
`

func (q *Queries) GetAllBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.Query(ctx, getAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Metadata,
			&i.Category,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBook = `-- name: GetBook :one
SELECT id, name, description, metadata, category, price, created_at, updated_at FROM books WHERE id = $1
`

func (q *Queries) GetBook(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRow(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.Category,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBooksByCategory = `-- name: GetBooksByCategory :many
SELECT id, name, description, metadata, category, price, created_at, updated_at FROM books WHERE category = $1 ORDER BY name
`

func (q *Queries) GetBooksByCategory(ctx context.Context, category BookCategory) ([]Book, error) {
	rows, err := q.db.Query(ctx, getBooksByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Metadata,
			&i.Category,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
